Index: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java	(revision e31d06032baebaf651ce8c69eed8c934586f3386)
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java	(date 1623758899659)
@@ -1015,6 +1015,8 @@
         populateHeaders(mapIds, jobId, user, reduceId, request,
           response, keepAliveParam, mapOutputInfoMap);
       } catch(IOException e) {
+        LOG.info("Writing response 1: " + response);
+        LOG.info("Response instance: " + response.getClass());
         ch.write(response);
         LOG.error("Shuffle error in populating headers :", e);
         String errorMessage = getErrorMessage(e);
@@ -1326,6 +1328,7 @@
           ChannelBuffers.copiedBuffer(msg, CharsetUtil.UTF_8));
 
       // Close the connection as soon as the error message is sent.
+      LOG.info("Writing response 2: " + response);
       ctx.getChannel().write(response).addListener(ChannelFutureListener.CLOSE);
     }
 
Index: hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestShuffleHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestShuffleHandler.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestShuffleHandler.java
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestShuffleHandler.java	(revision e31d06032baebaf651ce8c69eed8c934586f3386)
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/test/java/org/apache/hadoop/mapred/TestShuffleHandler.java	(date 1623766291544)
@@ -31,6 +31,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import java.io.ByteArrayOutputStream;
 import java.io.DataInputStream;
 import java.io.EOFException;
 import java.io.File;
@@ -38,9 +39,12 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.net.HttpURLConnection;
+import java.net.InetSocketAddress;
+import java.net.Proxy;
 import java.net.URL;
 import java.net.SocketAddress;
 import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -340,6 +344,7 @@
     conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,
         ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);
     conn.connect();
+    Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode());
     DataInputStream input = new DataInputStream(conn.getInputStream());
     Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode());
     Assert.assertEquals("close",
@@ -469,6 +474,7 @@
     conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,
         ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);
     conn.connect();
+    Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode());
     DataInputStream input = new DataInputStream(conn.getInputStream());
     Assert.assertEquals(HttpHeader.KEEP_ALIVE.asString(),
         conn.getHeaderField(HttpHeader.CONNECTION.asString()));
@@ -492,6 +498,7 @@
     conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,
         ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);
     conn.connect();
+    Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode());
     input = new DataInputStream(conn.getInputStream());
     Assert.assertEquals(HttpHeader.KEEP_ALIVE.asString(),
         conn.getHeaderField(HttpHeader.CONNECTION.asString()));
@@ -541,6 +548,7 @@
       conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,
           ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);
       conn.connect();
+      Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode());
       conn.getInputStream();
       Assert.assertTrue("socket should be set KEEP_ALIVE",
           shuffleHandler.isSocketKeepAlive());
@@ -666,6 +674,7 @@
     // Try to open numerous connections
     for (int i = 0; i < connAttempts; i++) {
       conns[i].connect();
+      //Assert.assertEquals(HttpURLConnection.HTTP_OK, conns[i].getResponseCode());
     }
 
     //Ensure first connections are okay
@@ -707,9 +716,9 @@
   @Test(timeout = 100000)
   public void testMapFileAccess() throws IOException {
     // This will run only in NativeIO is enabled as SecureIOUtils need it
-    assumeTrue(NativeIO.isAvailable());
+//    assumeTrue(NativeIO.isAvailable());
     Configuration conf = new Configuration();
-    conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY, 0);
+    conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY, 8088);
     conf.setInt(ShuffleHandler.MAX_SHUFFLE_CONNECTIONS, 3);
     conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,
         "kerberos");
@@ -761,34 +770,60 @@
                       ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY)
                   + "/mapOutput?job=job_12345_0001&reduce=" + reducerId
                   + "&map=attempt_12345_1_m_1_0");
+
+//      Proxy webProxy
+//          = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("127.0.0.1", 8888));
+//      HttpURLConnection conn
+//          = (HttpURLConnection) url.openConnection(webProxy);
       HttpURLConnection conn = (HttpURLConnection) url.openConnection();
       conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_NAME,
           ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);
       conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,
           ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);
       conn.connect();
-      byte[] byteArr = new byte[10000];
-      try {
-        DataInputStream is = new DataInputStream(conn.getInputStream());
-        is.readFully(byteArr);
-      } catch (EOFException e) {
-        // ignore
-      }
+//      byte[] byteArr = new byte[10000];
+//      try {
+//        DataInputStream is = new DataInputStream(conn.getInputStream());
+//        is.readFully(byteArr);
+//      } catch (EOFException e) {
+//        // ignore
+//      }
       // Retrieve file owner name
-      FileInputStream is = new FileInputStream(fileMap.get(0));
-      String owner = NativeIO.POSIX.getFstat(is.getFD()).getOwner();
-      is.close();
-
-      String message =
-          "Owner '" + owner + "' for path " + fileMap.get(0).getAbsolutePath()
-              + " did not match expected owner '" + user + "'";
-      Assert.assertTrue((new String(byteArr)).contains(message));
+//      FileInputStream is = new FileInputStream(fileMap.get(0));
+//      String owner = NativeIO.POSIX.getFstat(is.getFD()).getOwner();
+//      is.close();
+//
+//      String message =
+//          "Owner '" + owner + "' for path " + fileMap.get(0).getAbsolutePath()
+//              + " did not match expected owner '" + user + "'";
+//      String received = new String(byteArr);
+//      LOG.info("Received: " + received);
+      Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode());
+      DataInputStream input = new DataInputStream(conn.getInputStream());
+      String receivedString = readDataFromInputStream(input);
+      LOG.error("received: " + receivedString);
+//      Assert.assertTrue((new String(byteArr)).contains(message));
     } finally {
       shuffleHandler.stop();
       FileUtil.fullyDelete(ABS_LOG_DIR);
     }
   }
 
+  private static String readDataFromInputStream(DataInputStream input) throws IOException {
+    ByteArrayOutputStream buffer = new ByteArrayOutputStream();
+    int bytesRead = 0;
+    int ret = -1;
+    byte[] data = new byte[1024];
+    while ((ret = input.read(data)) != -1) {
+      buffer.write(data);
+      bytesRead += ret;
+    }
+    LOG.info("Read bytes: " + bytesRead);
+    buffer.flush();
+
+    return new String(buffer.toByteArray(), StandardCharsets.UTF_8);
+  }
+
   private static void createShuffleHandlerFiles(File logDir, String user,
       String appId, String appAttemptId, Configuration conf,
       List<File> fileMap) throws IOException {
@@ -1114,6 +1149,7 @@
       conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,
           ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);
       conn.connect();
+      Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode());
       try {
         DataInputStream is = new DataInputStream(conn.getInputStream());
         ShuffleHeader header = new ShuffleHeader();
